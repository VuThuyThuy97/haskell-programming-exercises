Chapter Exercises

Multiple choice
1. c
    A value of type [a] is
    a) a list of alphabetic characters
    b) a list of lists
    c) a list whose elements are all of some type 𝑎
    d) a list whose elements are all of different types
2. a
    A function of type [[a]] -> [a] could
    a) take a list of strings as an argument
    b) transform a character into a string
    c) transform a string into a list of strings
    d) take two arguments
3. b
    A function of type [a] -> Int -> a
    a) takes one argument
    b) returns one element of type 𝑎 from a list
    c) must return an Int value
    d) is completely fictional
4. c
    A function of type (a, b) -> a
    a) takes a list argument and returns a Char value
    b) has zero arguments
    c) takes a tuple argument and returns the first value
    d) requires that 𝑎 and 𝑏 be of different types



Determine the type

1. All function applications return a value. Determine the value
    returned by these function applications and the type of that
    value.
    a) (* 9) 6
    => 54 :: Num a => a
    b) head [(0,"doge"),(1,"kitteh")]
    => (0, "doge") :: Num a => (a, [Char])
    c) head [(0 :: Integer ,"doge"),(1,"kitteh")]
    => (0, "doge") :: (Integer, [Char])
    d) if False then True else False
    => False :: Bool
    e) length [1, 2, 3, 4, 5]
    => 5 :: Int
    f ) (length [1, 2, 3, 4]) > (length "TACOCAT")
    => False :: Bool
2. Given
    x = 5
    y = x + 5
    w = y * 10
    What is the type of w?

    => Num a => a
3. Given
    x = 5
    y = x + 5
    z y = y * 10
    What is the type of z?
    
    => Num a => a -> a
4. Given
    x = 5
    y = x + 5
    f = 4 / y
    What is the[Char]
    z = "Haskell"
    f = x ++ y ++ z
    What is the type of f?
    
    => [Char]



Does it compile?
    For each set of expressions, figure out which expression, if any, causes
    the compiler to squawk at you (n.b. we do not mean literal squawking)
    and why. Fix it if you can.
1. bigNum = (^) 5 $ 10
    wahoo = bigNum $ 10

    => No. bigNum = (^) 5 
    wahoo = bigNum $ 10
2. x = print
    y = print "woohoo!"
    z = x "hello world"
    
    => yes
3. a = (+)
    b = 5
    c = b 10
    d = c 200

    => No. Fix: c = a 10
4. a = 12 + b
    b = 10000 * c
    
    => no. insert new line: c = 0



Type variable or specific type constructor?

Categorize each component of the type signature as described in the previous example.

2. f :: zed -> Zed -> Blah

    zed: Fully polymorphic type variable
    Zed: Concrete type constructor.
    Blah: Concrete type constructor.

3. Categorize each component of the type signature

    f :: Enum b => a -> b -> C

    a: Fully polymorphic type variable
    b: Constraiend polymorphic type.
    C: Concrete type constructor.

4. Categorize each component of the type signature

    f :: f -> g -> C

    f: Fully polymorphic type variable
    g: Fully polymorphic type variable.
    C: Concrete type constructor.




Write a type signature

For the following expressions, please add a type signature. You should be able to rely on GHCi type inference to check your work, although you might not have precisely the same answer as GHCi gives (due to polymorphism, etc).

1. While we haven’t fully explained this syntax yet, you’ve seen it in Chapter 2 and as a solution to an exercise in Chapter 4. This syntax is a way of destructuring a single element of a list.
    functionH ::
    functionH (x:_) = x
    => functionH :: [a] -> a
2. functionC ::
    functionC x y = if (x > y) then True else False
    => functionC :: Ord a => a -> a -> Bool

3. functionS ::
    functionS (x, y) = y
    => functionS :: (a, b) -> b



Fix it 

1. Line 1: ++ => ->
3. negate -1 => negate 1



Given a type, write the function

You will be shown a type and a function that needs to be written. Use the information the type provides to determine what the function should do. We’ll also tell you how many ways there are to write the function. Syntactically different but semantically equivalent implementations are not counted as being different. For example, writing a function one way then rewriting the semantically identical function but using anonymous lambda syntax does not count as two implementations.

1. There is only one function definition that typechecks and doesn’t go into an infinite loop when you run it.
    i :: a -> a
    i = undefined
    => i a = a

2. There is only one version that works.
    c :: a -> b -> a
    c = undefined
    => c a b = a

3. Given alpha equivalence are c'' and c (see above) the same thing?
    c'' :: b -> a -> b
    c'' = ?
    => Yes. c'' b a = b.

4. Only one version that works.
    c' :: a -> b -> b
    c' = undefined
    => c' a b = b

5. There are multiple possibilities, at least two of which you’ve seen in previous chapters.
    r :: [a] -> [a]
    r = undefined
    => r = tail r = reverse

6. Only one version that will typecheck.
    co :: (b -> c) -> (a -> b) -> a -> c
    co = undefined
    => co bc ab a = bc $ ab $ a

7. One version will typecheck.
    a :: (a -> c) -> a -> a
    a = undefined
    => a ac a = a

8. One version will typecheck.
    a' :: (a -> b) -> a -> b
    a' = undefined
    => a' ab a = ab a




Type-Kwon-Do
1. 
    f :: Int -> String
    f = undefined

    g :: String -> Char
    g = undefined

    h :: Int -> Char
    h = ???

    => h i = g $ f i

2.
    data A
    data B
    data C

    q :: A -> B
    q = undefined

    w :: B -> C
    w = undefined

    e :: A -> C
    e = ???

    => e a = w $ q a

3. 
    data X
    data Y
    data Z

    xz :: X -> Z
    xz = undefined

    yz :: Y -> Z
    yz = undefined

    xform :: (X, Y) -> (Z, Z)
    xform = ???

    => xform (x, y) = (xz x, yz y)

4. 
    munge :: (x -> y) -> (y -> (w, z)) -> x -> w
    munge = ???
    => munge xy ywz x = fst $ ywz $ xy x